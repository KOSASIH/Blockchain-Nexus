// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract BlockchainBridge {
    // Events
    event TokenLocked(address indexed sender, uint256 amount, string targetChain, address targetAddress);
    event TokenReleased(address indexed receiver, uint256 amount, string sourceChain);

    // State Variables
    address public admin;
    mapping(bytes32 => bool) public processedTransactions;

    // Constructor
    constructor() {
        admin = msg.sender;
    }

    modifier onlyAdmin() {
        require(msg.sender == admin, "Only admin can perform this action");
        _;
    }

    // Lock tokens on the source chain
    function lockTokens(string memory targetChain, address targetAddress) external payable {
        require(msg.value > 0, "Amount must be greater than 0");

        bytes32 txHash = keccak256(abi.encodePacked(msg.sender, msg.value, targetChain, targetAddress, block.timestamp));
        require(!processedTransactions[txHash], "Transaction already processed");

        processedTransactions[txHash] = true;

        emit TokenLocked(msg.sender, msg.value, targetChain, targetAddress);
    }

    // Release tokens on the target chain
    function releaseTokens(
        address payable receiver,
        uint256 amount,
        string memory sourceChain,
        bytes32 txHash
    ) external onlyAdmin {
        require(!processedTransactions[txHash], "Transaction already processed");

        processedTransactions[txHash] = true;

        receiver.transfer(amount);

        emit TokenReleased(receiver, amount, sourceChain);
    }

    // Admin functions
    function withdrawFees() external onlyAdmin {
        payable(admin).transfer(address(this).balance);
    }
}
